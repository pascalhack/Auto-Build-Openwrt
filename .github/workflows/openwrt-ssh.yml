name: openwrt-ssh
on:
  workflow_dispatch:
  repository_dispatch:
  schedule:
    - cron: 0 21 * * 5
env:
  rc_rclone: ${{ secrets.RCONFIG }}
  REPO_URL: ${{ secrets.URL}}
  REPO_BRANCH: master
  REPO_NAME: openwrt
  CONFIG_FILE: N1.config
  DIY_SH: diy.sh
  TZ: Asia/Shanghai
jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - name: Checkout
      uses: actions/checkout@master
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
       docker rmi `docker images -q`
       sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc
       sudo -E apt-get -qq update
       sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804)
       sudo -E apt-get -qq autoremove --purge
       sudo -E apt-get -qq clean
       sudo timedatectl set-timezone "$TZ"
    - name: Configure rclone
      run: |
        sudo curl https://rclone.org/install.sh | sudo bash
        sudo mkdir -p /home/runner/.config/rclone
        sudo cat > rclone.conf << EOF
          ${rc_rclone}
        EOF
        sudo mkdir -p /mnt/gdrive
        sudo cp rclone.conf /home/runner/.config/rclone/  
        sudo rm -rf ~/work/Auto-Build-Openwrt/Auto-Build-Openwrt/rclone.conf
        sudo rclone mount GD: /mnt/gdrive --copy-links --allow-other --allow-non-empty --umask 000 --daemon & 
        df -h
    - name: Download openwrt
      run: | 
        wget  $REPO_URL
        tmp=$(find -name openwrtN1*)
        echo $tmp
        mkdir -p $REPO_NAME
        sudo tar zxvf $tmp -C $REPO_NAME
        sudo rm -rf $tmp
    - name: Update & Install feeds
      run: |
        cd $REPO_NAME 
        ./scripts/feeds update -a
        ./scripts/feeds install -a
    - name: Configuration Customization - Build_N1
      run: |
        chmod +x $DIY_SH
        [ -e files ] && mv files $REPO_NAME/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $REPO_NAME/.config
        cd $REPO_NAME
        make defconfig
    - name: Download package
      run: |
        cd $REPO_NAME
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      run: |
        cd $REPO_NAME
        make -j$(nproc) || make -j8 V=s
    - name: img packaging
      run: | 
         git clone https://github.com/tuanqing/mknop
         cd mknop
         cp ../$REPO_NAME/bin/targets/*/*/*.tar.gz openwrt
         sudo ./gen_openwrt -d -s 880 -k latest
         devices=("phicomm-n1" "vplus" "beikeyun" "l1pro" "s905x3")
          cd out
          for x in ${devices[*]}; do
            cd $x
            filename=$(ls | awk -F '.img' '{print $1}')
            gzip *.img
            cd ../
            echo "firmware_$x=$filename" >> $GITHUB_ENV
          done
    - name: Upload firmware @ phicomm n1
      uses: actions/upload-artifact@main
      with:
       name: ${{ env.firmware_phicomm-n1 }}
       path: ./mknop/out/phicomm-n1 
    - name: Start SSH via tmate
      uses: P3TERX/ssh2actions@main
      env:
       TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
       TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    - name: Upload GD N1-img
      working-directory: ./mknop
      run: |
        cd out/phicomm-n1
        tmp=$(find . -name "*.img")
        echo $tmp
        sudo rclone sync $tmp GD:bin 
    - name: Upload GD packages
      run: |
        cd $REPO_NAME/bin/packages/*
        sudo tar czvf N1-packages-`date +%Y年%m月%d日%H时%M分%S秒`.tar.gz * 
        tmp=$(find . -name "*.tar.gz")
        echo $tmp
        sudo rclone sync $tmp GD:ipk
        
    - name: Upload GD N1-bin
      run: |
        cd $REPO_NAME/bin/targets/*/*
        rm -rf packages
        rm -rf openwrt-armvirt-64-default-rootfs.tar.gz
        sudo tar czvf N1-bin-`date +%Y年%m月%d日%H时%M分%S秒`.tar.gz *  
        tmp=$(find . -name "*.tar.gz")
        echo $tmp
        sudo rclone sync $tmp GD:bin 
