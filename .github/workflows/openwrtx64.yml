name: Auto-Build-Openwrtx64

on:
  workflow_dispatch:
  repository_dispatch:
  schedule:
    - cron: 0 21 * * 5

env:
  rc_rclone: ${{ secrets.RCONFIG }}
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  REPO_NAME: openwrt
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: x64.config
  DIY_SH: diy.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
       docker rmi `docker images -q`
       sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
       sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
       sudo -E apt-get update
       sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
       sudo -E apt-get -y autoremove --purge
       sudo -E apt-get clean
       sudo timedatectl set-timezone "$TZ"
       sudo mkdir -p /workdir
       sudo chown $USER:$GROUPS /workdir

    - name: Configure rclone
      run: |
        sudo curl https://rclone.org/install.sh | sudo bash
        sudo mkdir -p /home/runner/.config/rclone
        sudo cat > rclone.conf << EOF
          ${rc_rclone}
        EOF
        sudo mkdir -p /mnt/gdrive
        sudo cp rclone.conf /home/runner/.config/rclone/  
        sudo rm -rf /home/runner/work/openwrt-CI/openwrt-CI/rclone.conf
        sudo rclone mount GD: /mnt/gdrive --copy-links --allow-other --allow-non-empty --umask 000 --daemon &
    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH $REPO_NAME
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/$REPO_NAME

    - name: Update & Install feeds
      run: |
       cd $REPO_NAME 
       ./scripts/feeds update -a
       ./scripts/feeds install -a
       
    - name: Configuration Customization - Build_x64
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $REPO_NAME/feeds.conf.default
        [ -e files ] && mv files $REPO_NAME/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $REPO_NAME/.config
        chmod +x $DIY_SH
        ./$DIY_SH
        cd $REPO_NAME
        $GITHUB_WORKSPACE/$DIY_SH
        make defconfig
    - name: Download package
      run: |
        cd $REPO_NAME
        make download -j8
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      run: |
        cd openwrt
        make -j$(nproc) || make -j8 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "::set-env name=DEVICE_NAME::_$(cat DEVICE_NAME)"
        echo "::set-env name=FILE_DATE::_$(date +"%Y%m%d%H%M")"

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "::set-env name=FIRMWARE::$PWD"
        echo "::set-output name=status::success"
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
    
    - name: Upload GD packages
      run: |
        cd openwrt/bin/packages/*
        sudo tar czvf x64-packages-`date +%Y年%m月%d日%H时%M分%S秒`.tar.gz * 
        tmp=$(find . -name "*.tar.gz")
        echo $tmp
        sudo rclone sync $tmp GD:bin/IPK
        
    - name: Upload GD x64-bin
      run: |
        cd openwrt/bin/targets/*/*
        sudo tar czvf x64-bin-`date +%Y年%m月%d日%H时%M分%S秒`.tar.gz *  
        tmp=$(find . -name "*.tar.gz")
        echo $tmp
        sudo rclone sync $tmp GD:bin/X64
    - name: packing op
      run: |
        cd openwrt
        rm -rf bin
        sudo tar czvf openwrtx64-`date +%Y年%m月%d日%H时%M分%S秒`.tar.gz *  
        tmp=$(find -name openwrtx64*)
        echo $tmp
        sudo rclone sync $tmp GD:bin/PSC 
